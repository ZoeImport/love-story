package main

import (
	"context"
	"fmt"
	pb "gogrpc/hello/hello-server/proto"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"log"
)

type clientAuth struct {
}

func (c *clientAuth) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {
	return map[string]string{
		"appid": "123",
	}, nil
}

func (c *clientAuth) RequireTransportSecurity() bool {
	return true
}

func main() {

	creds, err := credentials.NewClientTLSFromFile("//home/zoe/CodeSpace/QingShu/awesome_language/go_learning/grpc/key/test.pem", "*.zoeImport.com")
	if err != nil {
		log.Fatalf("Failed to create TLS credentials %v", err)
	}

	var opt []grpc.DialOption
	opt = append(opt, grpc.WithTransportCredentials(creds))
	opt = append(opt, grpc.WithPerRPCCredentials(new(clientAuth)))

	conn, err := grpc.NewClient("127.0.0.1:9090", opt...)
	if err != nil {
		panic(err)
	}
	defer conn.Close()

	// establish connection by method generated by protoc
	client := pb.NewSayHiClient(conn)

	resp, _ := client.SayHi(context.Background(), &pb.HelloRequest{RequestName: "john wick"})
	fmt.Printf("%v", resp)
}
