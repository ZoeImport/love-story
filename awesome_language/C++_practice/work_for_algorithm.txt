//算法分析题
//1-1
3n^2+10n:       O(n^2)  
(n^2)/10+2^n:   O(2^n)  
21+(1/n):       O(1)    
logn^3:         O(logn)     
10log3^n:       O(n)
//1-3
4n^2:   O(n^2)
logn:   O(logn)
3^n:    O(3^n)
20n:    O(n)
2:      O(1)
n^(2/3):O(n^(2/3))
n!:     O(n^n)

3<logn<n^(2/3)<20n<4n^2<3^n<n!

//算法实现题
//1-1
//统计数字问题
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

vector<int> countDigitOccurrences(int n) {
    vector<int> digitCounts(10, 0); // 初始化每个数字的计数器

    for (int i = 1; i <= n; ++i) {
        int currentNumber = i;

        while (currentNumber > 0) {
            int lastDigit = currentNumber % 10;
            digitCounts[lastDigit]++;
            currentNumber /= 10;
        }
    }

    return digitCounts;
}

int main() {
    // 从文件读取输入
    ifstream inputFile("input.txt");
    int n;
    inputFile >> n;
    inputFile.close();

    // 计算数字出现次数
    vector<int> digitCounts = countDigitOccurrences(n);

    // 输出结果到文件
    ofstream outputFile("output.txt");
    for (int i = 0; i < 10; ++i) {
        outputFile << digitCounts[i] << endl;
    }
    outputFile.close();

    return 0;
}

//1-3
//最多约数问题
#include <iostream>
#include <vector>

using namespace std;

vector<int> countDivisors(int n) {
    vector<int> divisors(n + 1, 0);

    for (int i = 1; i <= n; ++i) {
        for (int j = i; j <= n; j += i) {
            divisors[j]++;
        }
    }

    return divisors;
}

pair<int, int> findNumbersWithMaxDivisors(int a, int b) {
    vector<int> divisors = countDivisors(b);

    int maxDivisors = 0;
    pair<int, int> result;

    for (int i = a; i <= b; ++i) {
        if (divisors[i] > maxDivisors) {
            maxDivisors = divisors[i];
            result = make_pair(i, i);
        }
    }

    return result;
}

int main() {
    int a, b;

    // 从用户输入获取范围
    cout << "Enter the range [a, b]: ";
    cin >> a >> b;

    // 找到在给定范围内拥有最多约数的数
    pair<int, int> result = findNumbersWithMaxDivisors(a, b);

    // 输出结果
    cout << "Between " << a << " and " << b << ", the number with the most divisors is: " << result.first << endl;
    cout << "It has " << countDivisors(result.first) << " divisors." << endl;

    return 0;
}



//算法分析题
//2-8
//设a[0:n-1]是有n个元素的数组，k(0<=k<=n-1)k是一个非负整数,试着设计一个算法将子数组a[0:k-1],a[k:n-1]换位，要求算法在最坏的情况下耗时O(n),且只使用O(1)的辅助空间，C++实现
#include <iostream>
#include <vector>

void reverseArray(std::vector<int>& arr, int start, int end) {
    while (start < end) {
        std::swap(arr[start], arr[end]);
        start++;
        end--;
    }
}

void rotateArray(std::vector<int>& arr, int k) {
    int n = arr.size();
    k = k % n; // 处理k大于n的情况

    reverseArray(arr, 0, n - 1);       // 翻转整个数组
    reverseArray(arr, 0, k - 1);       // 翻转前半部分子数组
    reverseArray(arr, k, n - 1);       // 翻转后半部分子数组
}

int main() {
    std::vector<int> arr = {1, 2, 3, 4, 5, 6, 7};
    int k = 3;

    rotateArray(arr, k);

    // 输出结果
    for (int i : arr) {
        std::cout << i << " ";
    }

    return 0;
}

//2-13
//如何修改QuickSort算法才能使其将输入元素按非增序排序

#include <iostream>
#include <vector>

template <typename T>
int partition(std::vector<T>& arr, int low, int high) {
    T pivot = arr[high];
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (arr[j] >= pivot) {
            i++;
            std::swap(arr[i], arr[j]);
        }
    }

    std::swap(arr[i + 1], arr[high]);
    return i + 1;
}

template <typename T>
void quickSort(std::vector<T>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    std::vector<int> arr = {12, 4, 5, 6, 7, 3, 1, 15};

    int n = arr.size();

    quickSort(arr, 0, n - 1);

    // 输出结果
    for (int i : arr) {
        std::cout << i << " ";
    }

    return 0;
}

//算法实现题
//2-1
//众数问题
#include <iostream>
#include <fstream>
#include <unordered_map>
#include <vector>

using namespace std;

pair<int, int> findModeAndCount(const vector<int>& S) {
    unordered_map<int, int> countMap;

    // 遍历多重集合，计数元素出现的次数
    for (int element : S) {
        countMap[element]++;
    }

    int mode = 0;  // 众数
    int maxCount = 0;  // 众数的重数

    // 第一轮扫描：找到最大计数
    for (const auto& entry : countMap) {
        if (entry.second > maxCount) {
            maxCount = entry.second;
        }
    }

    // 第二轮扫描：找到众数
    for (const auto& entry : countMap) {
        if (entry.second == maxCount) {
            mode = entry.first;
            break;  // 一旦找到众数，就可以停止扫描
        }
    }

    return make_pair(mode, maxCount);
}

int main() {
    ifstream inputFile("input.txt");
    ofstream outputFile("output.txt");

    int n;
    inputFile >> n;

    vector<int> S(n);
    for (int i = 0; i < n; ++i) {
        inputFile >> S[i];
    }

    // 找到众数和其重数
    pair<int, int> result = findModeAndCount(S);

    // 输出结果
    outputFile << "Mode of the multiset: " << result.first << endl;
    outputFile << "Count of the mode: " << result.second << endl;

    inputFile.close();
    outputFile.close();

    return 0;
}


//2-2
//马的Hamilton周游路线问题
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

const int N = 8;  // 棋盘大小

const int moves[8][2] = {{2, 1}, {1, 2}, {-1, 2}, {-2, 1},
                         {-2, -1}, {-1, -2}, {1, -2}, {2, -1}};

bool isValidMove(int x, int y, vector<vector<int>>& board) {
    return x >= 0 && x < N && y >= 0 && y < N && board[x][y] == -1;
}

bool hamiltonianTour(vector<vector<int>>& board, int x, int y, int moveCount) {
    if (moveCount == N * N) {
        return true;
    }

    for (int k = 0; k < 8; ++k) {
        int nextX = x + moves[k][0];
        int nextY = y + moves[k][1];

        if (isValidMove(nextX, nextY, board)) {
            board[nextX][nextY] = moveCount;

            if (hamiltonianTour(board, nextX, nextY, moveCount + 1)) {
                return true;
            }

            board[nextX][nextY] = -1;
        }
    }

    return false;
}

void printSolution(const vector<vector<int>>& board, ofstream& outputFile) {
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            outputFile << board[i][j] << "\t";
        }
        outputFile << endl;
    }
}

int main() {
    vector<vector<int>> board(N, vector<int>(N, -1));

    ifstream inputFile("input.txt");
    ofstream outputFile("output.txt");

    int startX, startY;
    inputFile >> startX >> startY;

    board[startX][startY] = 0;

    if (hamiltonianTour(board, startX, startY, 1)) {
        outputFile << "Hamiltonian tour found:" << endl;
        printSolution(board, outputFile);
    } else {
        outputFile << "No Hamiltonian tour found." << endl;
    }

    inputFile.close();
    outputFile.close();

    return 0;
}


//算法分析题
//3-3


//3-4
//给定n种物品和一背包，物品i的重量是Wi,体积是Bi,其价值为Vi,背包的容量为C,容积为D,问应该如何选择装入背包中的物品，使得装入背包中物品的总价值最大？
//在选择装入背包物品时，对每种物品i只有两种选择，即装入背包或者不装入背包，不能将物品i装入背包多次，也不能只装入部分的物品i.
//设计一个解此问题的动态规划算法，并分析算法的计算复杂性

//定义一个三维数组dp[i][j][k]，表示前i种物品在容量为j和体积为k的背包中的最大价值

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int knapsack(int n, int C, int D, vector<int>& W, vector<int>& B, vector<int>& V) {
    vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(C + 1, vector<int>(D + 1, 0)));

    for (int i = 1; i <= n; i++) {
        for (int j = 0; j <= C; j++) {
            for (int k = 0; k <= D; k++) {
                dp[i][j][k] = dp[i - 1][j][k];

                if (j >= W[i - 1] && k >= B[i - 1]) {
                    dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - W[i - 1]][k - B[i - 1]] + V[i - 1]);
                }
            }
        }
    }

    return dp[n][C][D];
}

int main() {
    int n = 3; // 物品种类数
    int C = 5; // 背包容量
    int D = 4; // 背包体积
    vector<int> W = {2, 1, 3}; // 物品重量
    vector<int> B = {1, 2, 2}; // 物品体积
    vector<int> V = {3, 2, 4}; // 物品价值

    int result = knapsack(n, C, D, W, B, V);

    cout << "背包中物品的总价值最大为: " << result << endl;

    return 0;
}

//算法的时间复杂度为O(n * C * D)，空间复杂度为O(n * C * D)，其中n是物品种类数，C是背包容量，D是背包体积

//算法实现题
//3-3
//石子合并问题
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream inputFile("input.txt");
    ofstream outputFile("output.txt");

    if (!inputFile.is_open() || !outputFile.is_open()) {
        cerr << "Failed to open files." << endl;
        return 1;
    }

    int n;
    inputFile >> n;

    vector<int> piles(n);
    for (int i = 0; i < n; ++i) {
        inputFile >> piles[i];
    }

    // 动态规划数组
    vector<vector<int>> dpMin(n, vector<int>(n, INT_MAX));
    vector<vector<int>> dpMax(n, vector<int>(n, 0));

    // 初始化动态规划数组
    for (int i = 0; i < n; ++i) {
        dpMin[i][i] = 0;
        dpMax[i][i] = 0;
    }

    // 动态规划
    for (int len = 2; len <= n; ++len) {
        for (int i = 0; i <= n - len; ++i) {
            int j = i + len - 1;
            for (int k = i; k < j; ++k) {
                int cost = dpMax[i][k] + dpMax[k + 1][j] + piles[i] * piles[k + 1] * piles[j + 1];
                dpMin[i][j] = min(dpMin[i][j], dpMin[i][k] + dpMin[k + 1][j] + piles[i] * piles[k + 1] * piles[j + 1]);
                dpMax[i][j] = max(dpMax[i][j], cost);
            }
        }
    }

    int minScore = dpMin[0][n - 1];
    int maxScore = dpMax[0][n - 1];

    // 输出结果到文件
    outputFile << "Minimum Score: " << minScore << endl;
    outputFile << "Maximum Score: " << maxScore << endl;

    // 关闭文件
    inputFile.close();
    outputFile.close();

    return 0;
}

//3-4
//数字三角形问题
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

int maxPathSum(const vector<vector<int>>& triangle) {
    int n = triangle.size();

    // 从倒数第二行开始，自底向上计算最大路径和
    for (int i = n - 2; i >= 0; --i) {
        for (int j = 0; j <= i; ++j) {
            triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1]);
        }
    }

    // 最终结果存储在三角形的顶部
    return triangle[0][0];
}

int main() {
    ifstream inputFile("input.txt");
    ofstream outputFile("output.txt");

    if (!inputFile.is_open() || !outputFile.is_open()) {
        cerr << "Failed to open files." << endl;
        return 1;
    }

    int n;
    inputFile >> n;

    vector<vector<int>> triangle(n, vector<int>(n, 0));

    // 读取数字三角形
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j <= i; ++j) {
            inputFile >> triangle[i][j];
        }
    }

    // 计算最大路径和
    int result = maxPathSum(triangle);

    // 输出结果到文件
    outputFile << "Maximum path sum: " << result << endl;

    // 关闭文件
    inputFile.close();
    outputFile.close();

    return 0;
}


//算法分析题
//4-2
//将最优装载问题的贪心算法推广到两艘船的情形，贪心算法仍能产生最优解吗？

答:因为需要同时考虑两艘船的装载情况。贪心算法可能在某些情况下找到次优解，但并不能保证总是找到全局最优解

//4-3
//字符a~h出现的频率恰好是前8个斐波那契数，他们的哈夫曼编码是什么？将结果推广到n个字符的频率恰好是前n个斐波那契数的情形

答：前8个字符的哈夫曼编码是：
    a:1111111
    b:1111110
    c:111110
    d:11110
    e:1110
    f:110
    g:10
    h:0

    推广到n个字符：
    Ci={
        1^(n-1)     i=1;
        1^(n-i)0    2<=i<=n; 
    }

//算法实现题
//4-5
//程序存储问题
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

struct Program {
    int length;
    int index;
};

bool comparePrograms(const Program& p1, const Program& p2) {
    return p1.length < p2.length;
}

void maxStorage(const vector<Program>& programs, int L, vector<int>& result) {
    int n = programs.size();
    vector<vector<int>> dp(n + 1, vector<int>(L + 1, 0));

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= L; ++j) {
            if (programs[i - 1].length <= j) {
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - programs[i - 1].length] + 1);
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }

    int i = n, j = L;
    while (i > 0 && j > 0) {
        if (dp[i][j] != dp[i - 1][j]) {
            result.push_back(programs[i - 1].index);
            j -= programs[i - 1].length;
        }
        --i;
    }

    reverse(result.begin(), result.end());
}

int main() {
    ifstream inputFile("input.txt");
    ofstream outputFile("output.txt");

    if (!inputFile.is_open() || !outputFile.is_open()) {
        cerr << "Failed to open files." << endl;
        return 1;
    }

    int n, L;
    inputFile >> n >> L;

    vector<Program> programs(n);
    for (int i = 0; i < n; ++i) {
        programs[i].index = i + 1;
        inputFile >> programs[i].length;
    }

    sort(programs.begin(), programs.end(), comparePrograms);

    vector<int> result;
    maxStorage(programs, L, result);

    // 输出结果到文件
    outputFile << "Number of programs stored: " << result.size() << endl;
    outputFile << "Stored program indices: ";
    for (int i = 0; i < result.size(); ++i) {
        outputFile << result[i] << " ";
    }
    outputFile << endl;

    // 关闭文件
    inputFile.close();
    outputFile.close();

    return 0;
}


//4-6
//最优次序问题
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

struct Customer {
    int index;
    int serviceTime;
};

bool compareCustomers(const Customer& c1, const Customer& c2) {
    return c1.serviceTime < c2.serviceTime;
}

int main() {
    ifstream inputFile("input.txt");
    ofstream outputFile("output.txt");

    if (!inputFile.is_open() || !outputFile.is_open()) {
        cerr << "Failed to open files." << endl;
        return 1;
    }

    int n;
    inputFile >> n;

    vector<Customer> customers(n);
    for (int i = 0; i < n; ++i) {
        customers[i].index = i + 1;
        inputFile >> customers[i].serviceTime;
    }

    sort(customers.begin(), customers.end(), compareCustomers);

    // 计算平均等待时间
    double averageWaitTime = 0.0;
    double totalWaitTime = 0.0;

    for (int i = 0; i < n; ++i) {
        totalWaitTime += customers[i].serviceTime * i;
    }

    averageWaitTime = totalWaitTime / n;

    // 输出服务次序到文件
    outputFile << "Optimal service order:" << endl;
    for (int i = 0; i < n; ++i) {
        outputFile << "Customer " << customers[i].index << " (Service Time: " << customers[i].serviceTime << ")" << endl;
    }

    outputFile << "Average Wait Time: " << averageWaitTime << endl;

    // 关闭文件
    inputFile.close();
    outputFile.close();

    return 0;
}



//5-3
//重写0-1背包问题的回溯法，使算法能输出最优解

#include <iostream>
#include <vector>

using namespace std;

void backtrack(int currentWeight, int currentValue, int index, int capacity, vector<int>& weights, vector<int>& values, vector<int>& selected, int& maxTotalValue, vector<int>& bestSelected) {
    // 如果超过背包容量或者已经考虑完所有物品
    if (currentWeight > capacity || index == weights.size()) {
        if (currentValue > maxTotalValue) {
            maxTotalValue = currentValue;
            bestSelected = selected;
        }
        return;
    }

    // 不选取当前物品
    backtrack(currentWeight, currentValue, index + 1, capacity, weights, values, selected, maxTotalValue, bestSelected);

    // 选取当前物品
    if (currentWeight + weights[index] <= capacity) {
        currentWeight += weights[index];
        currentValue += values[index];
        selected[index] = 1;

        backtrack(currentWeight, currentValue, index + 1, capacity, weights, values, selected, maxTotalValue, bestSelected);

        currentWeight -= weights[index];
        currentValue -= values[index];
        selected[index] = 0;
    }
}

void printSolution(const vector<int>& bestSelected, const vector<int>& values) {
    cout << "Selected items: ";
    for (int i = 0; i < bestSelected.size(); ++i) {
        if (bestSelected[i] == 1) {
            cout << i << " ";
        }
    }
    cout << endl;

    cout << "Total value: " << accumulate(bestSelected.begin(), bestSelected.end(), 0, [&](int sum, int selected) {
        return sum + (selected == 1);
    }) << endl;
}

int main() {
    vector<int> weights = {2, 3, 4, 5};
    vector<int> values = {3, 4, 5, 6};
    int capacity = 5;

    vector<int> selected(weights.size(), 0);
    vector<int> bestSelected(weights.size(), 0);
    int maxTotalValue = 0;

    backtrack(0, 0, 0, capacity, weights, values, selected, maxTotalValue, bestSelected);

    cout << "Optimal solution:" << endl;
    printSolution(bestSelected, values);

    return 0;
}

//算法分析题
//5-4
//试设计一个解最大团问题的迭代回溯算法
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// 判断节点v是否可以加入当前团中
bool isSafe(int v, const vector<vector<int>>& graph, const vector<int>& clique, int size) {
    for (int i = 0; i < size; ++i) {
        if (graph[v][clique[i]] == 0) {
            return false; // 如果v与clique中任意一个节点不相邻，则不安全
        }
    }
    return true;
}

// 输出找到的最大团
void printClique(const vector<int>& clique) {
    cout << "Max Clique: { ";
    for (int v : clique) {
        cout << v << " ";
    }
    cout << "}" << endl;
}

// 迭代回溯算法
void findMaxCliqueUtil(int v, const vector<vector<int>>& graph, vector<int>& clique, int& maxSize) {
    int n = graph.size();
    if (v == n) {
        if (clique.size() > maxSize) {
            maxSize = clique.size();
            printClique(clique);
        }
        return;
    }

    // 尝试将节点v加入当前团
    if (isSafe(v, graph, clique, clique.size())) {
        clique.push_back(v);
        findMaxCliqueUtil(v + 1, graph, clique, maxSize);
        clique.pop_back();
    }

    // 不加入v，继续尝试下一个节点
    findMaxCliqueUtil(v + 1, graph, clique, maxSize);
}

// 主函数
void findMaxClique(const vector<vector<int>>& graph) {
    int n = graph.size();
    vector<int> clique;
    int maxSize = 0;

    findMaxCliqueUtil(0, graph, clique, maxSize);
}

int main() {
    // 例子：无向图的邻接矩阵表示
    vector<vector<int>> graph = {
        {0, 1, 1, 0, 0},
        {1, 0, 1, 1, 0},
        {1, 1, 0, 1, 1},
        {0, 1, 1, 0, 1},
        {0, 0, 1, 1, 0}
    };

    findMaxClique(graph);

    return 0;
}

//算法实现题
//5-3
//最小重量及其设计问题
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

struct Component {
    int weight;
    int price;
};

bool compareComponents(const Component& c1, const Component& c2) {
    return c1.price < c2.price;
}

int main() {
    ifstream inputFile("input.txt");
    ofstream outputFile("output.txt");

    if (!inputFile.is_open() || !outputFile.is_open()) {
        cerr << "Failed to open files." << endl;
        return 1;
    }

    int n, m, c;
    inputFile >> n >> m >> c;

    vector<vector<Component>> components(n, vector<Component>(m));

    // 读取部件信息
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            inputFile >> components[i][j].weight >> components[i][j].price;
        }
    }

    // 动态规划数组
    vector<vector<int>> dp(m + 1, vector<int>(c + 1, INT_MAX));

    // 初始化动态规划数组
    for (int j = 0; j <= m; ++j) {
        dp[j][0] = 0;
    }

    // 动态规划
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            for (int k = components[i - 1][0].price; k <= c; ++k) {
                dp[j][k] = min(dp[j][k], dp[j - 1][k - components[i - 1][j - 1].price] + components[i - 1][j - 1].weight);
            }
        }
    }

    // 寻找最小重量
    int minWeight = INT_MAX;
    for (int k = 0; k <= c; ++k) {
        minWeight = min(minWeight, dp[m][k]);
    }

    // 输出结果到文件
    outputFile << "Minimum Weight: " << minWeight << endl;

    // 关闭文件
    inputFile.close();
    outputFile.close();

    return 0;
}

//5-9
//拉丁矩阵问题
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

void generateLatinSquare(int n, vector<vector<int>>& square) {
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            square[i][j] = (i + j) % n + 1;
        }
    }
}

void printLatinSquare(const vector<vector<int>>& square, ofstream& outputFile) {
    for (const auto& row : square) {
        for (int num : row) {
            outputFile << num << " ";
        }
        outputFile << endl;
    }
}

int main() {
    ifstream inputFile("input.txt");
    ofstream outputFile("output.txt");

    if (!inputFile.is_open() || !outputFile.is_open()) {
        cerr << "Failed to open files." << endl;
        return 1;
    }

    int n;
    inputFile >> n;

    // 初始化拉丁矩阵
    vector<vector<int>> latinSquare(n, vector<int>(n, 0));

    // 生成拉丁矩阵
    generateLatinSquare(n, latinSquare);

    // 输出结果到文件
    outputFile << "Latin Square of Order " << n << ":" << endl;
    printLatinSquare(latinSquare, outputFile);

    // 关闭文件
    inputFile.close();
    outputFile.close();

    return 0;
}



//算法分析题
//6-4
//试修改解装载问题和解0-1背包问题的优先队列式分支限界法，使其仅使用一个最大堆来储存活结点，而不必存储产生的解空间树
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

struct Node {
    int level;   // 当前结点在决策树中的层级
    int weight;  // 当前已装载的重量
    int value;   // 当前已装载的价值
    int bound;   // 当前结点的下界值

    Node(int l, int w, int v, int b) : level(l), weight(w), value(v), bound(b) {}

    // 用于优先队列比较的函数
    bool operator<(const Node& other) const {
        return bound < other.bound;
    }
};

// 计算结点的下界值（贪心法）
int calculateBound(int level, int weight, int value, int capacity, vector<int>& weights, vector<int>& values) {
    int bound = value;
    int remainingWeight = capacity - weight;
    int i = level;

    while (i < weights.size() && weights[i] <= remainingWeight) {
        bound += values[i];
        remainingWeight -= weights[i];
        i++;
    }

    if (i < weights.size()) {
        // 考虑部分装载
        bound += (remainingWeight * values[i]) / weights[i];
    }

    return bound;
}

int knapsack(int capacity, vector<int>& weights, vector<int>& values) {
    priority_queue<Node> pq;
    Node root(-1, 0, 0, calculateBound(-1, 0, 0, capacity, weights, values));
    int maxValue = 0;

    pq.push(root);

    while (!pq.empty()) {
        Node current = pq.top();
        pq.pop();

        if (current.bound > maxValue) {
            int level = current.level + 1;
            int weight = current.weight + weights[level];
            int value = current.value + values[level];

            if (weight <= capacity && value > maxValue) {
                maxValue = value;
            }

            int bound = calculateBound(level, weight, value, capacity, weights, values);

            if (bound > maxValue) {
                pq.push(Node(level, weight, value, bound));
            }

            pq.push(Node(level, current.weight, current.value, current.bound));
        }
    }

    return maxValue;
}

int main() {
    vector<int> weights = {2, 3, 4, 5};
    vector<int> values = {3, 4, 5, 6};
    int capacity = 5;

    int result = knapsack(capacity, weights, values);

    cout << "Optimal value: " << result << endl;

    return 0;
}


//6-7
//考虑最大团问题的子集空间树中第i层的第一个结点x,设MinDegree(x)是以结点x为根的子树中所有结点度数的最小值
//(1)设x,u=min{x.cn+n-i+1,MinDegree(x)+1},证明以结点x为根的子树中任意叶结点相应的团的大小不超过x.u.
//(2)依此x.u的定义重写算法BBMaxClique
//(3)比较新旧算法所需的计算时间和产生的排列树结点树

答：
(1)证明：
当 x.cn + n - i + 1 <= MinDegree(x) + 1 时，团的大小不超过 x.cn + n - i + 1。
当 x.cn + n - i + 1 > MinDegree(x) + 1 时，团的大小不超过 MinDegree(x) + 1。
对于第一种情况，由于 x.cn + n - i + 1 <= MinDegree(x) + 1，团的大小不会超过 x.cn + n - i + 1。
对于第二种情况，由于 MinDegree(x) 是以结点 x 为根的子树中所有结点度数的最小值，因此团的大小不会超过 MinDegree(x) + 1。
综上：以结点 x 为根的子树中任意叶结点相应的团的大小不超过 x.u
(2)
#include <iostream>
#include <vector>

using namespace std;

struct Node {
    int level;
    int degree;
    int bound;

    Node(int l, int d, int b) : level(l), degree(d), bound(b) {}

    bool operator<(const Node& other) const {
        return bound < other.bound;
    }
};

// 计算结点的下界值
int calculateBound(int level, int degree, int n, vector<vector<int>>& graph) {
    return min(degree + n - level + 1, graph.size() - level + 1);
}

// 更新结点的度数
int updateDegree(int node, int degree, vector<vector<int>>& graph) {
    for (int i = 0; i < graph.size(); ++i) {
        if (graph[node][i] == 1) {
            degree--;
        }
    }
    return degree;
}

int BBMaxClique(vector<vector<int>>& graph) {
    int n = graph.size();
    priority_queue<Node> pq;
    Node root(-1, n - 1, n);

    pq.push(root);

    int maxCliqueSize = 0;

    while (!pq.empty()) {
        Node current = pq.top();
        pq.pop();

        if (current.bound > maxCliqueSize) {
            int level = current.level + 1;

            // Try adding the current node to the clique
            int bound = calculateBound(level, current.degree, n, graph);
            if (bound > maxCliqueSize) {
                maxCliqueSize = bound;
            }

            // Check if the current node can be part of a larger clique
            if (level < n - 1 && current.degree > 0) {
                pq.push(Node(level, updateDegree(level, current.degree, graph), calculateBound(level, current.degree, n, graph)));
                pq.push(Node(level, current.degree, calculateBound(level, current.degree, n, graph)));
            }
        }
    }

    return maxCliqueSize;
}

int main() {
    vector<vector<int>> graph = {
        {0, 1, 1, 0, 1},
        {1, 0, 1, 1, 0},
        {1, 1, 0, 1, 1},
        {0, 1, 1, 0, 1},
        {1, 0, 1, 1, 0}
    };

    int result = BBMaxClique(graph);

    cout << "Max Clique Size: " << result << endl;

    return 0;
}
(3)



//算法实现题
//6-6
//N后问题
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

bool isSafe(int row, int col, const vector<int>& placement) {
    // 检查是否和之前的皇后在同一列或同一对角线上
    for (int i = 0; i < row; ++i) {
        if (placement[i] == col || abs(placement[i] - col) == abs(i - row)) {
            return false;
        }
    }
    return true;
}

void solveNQueens(int row, int N, vector<int>& placement, vector<vector<string>>& result) {
    if (row == N) {
        // 当前解法合法，将结果加入到result中
        vector<string> solution;
        for (int i = 0; i < N; ++i) {
            string rowStr(N, '.');
            rowStr[placement[i]] = 'Q';
            solution.push_back(rowStr);
        }
        result.push_back(solution);
        return;
    }

    for (int col = 0; col < N; ++col) {
        if (isSafe(row, col, placement)) {
            placement[row] = col;
            solveNQueens(row + 1, N, placement, result);
        }
    }
}

void printSolutions(const vector<vector<string>>& result, ofstream& outputFile) {
    for (const auto& solution : result) {
        for (const string& row : solution) {
            outputFile << row << endl;
        }
        outputFile << endl;
    }
}

int main() {
    ifstream inputFile("input.txt");
    ofstream outputFile("output.txt");

    if (!inputFile.is_open() || !outputFile.is_open()) {
        cerr << "Failed to open files." << endl;
        return 1;
    }

    int N;
    inputFile >> N;

    // 存储皇后的摆放方式
    vector<int> placement(N, 0);

    // 存储所有解法
    vector<vector<string>> result;

    // 解决N皇后问题
    solveNQueens(0, N, placement, result);

    // 输出结果到文件
    printSolutions(result, outputFile);

    // 关闭文件
    inputFile.close();
    outputFile.close();

    return 0;
}

//6-2
//最小权顶点覆盖问题
#include <iostream>
#include <fstream>
#include <vector>
#include <set>

using namespace std;

struct Vertex {
    int index;
    int weight;
};

bool operator<(const Vertex& v1, const Vertex& v2) {
    return v1.weight < v2.weight;
}

void minWeightVertexCover(int V, const vector<pair<int, int>>& edges, const vector<Vertex>& vertices, set<int>& cover) {
    set<pair<int, int>> edgeSet(edges.begin(), edges.end());
    set<Vertex> vertexSet(vertices.begin(), vertices.end());

    while (!edgeSet.empty()) {
        pair<int, int> edge = *edgeSet.begin();

        int u = edge.first;
        int v = edge.second;

        if (vertexSet.lower_bound(Vertex{u, 0}) != vertexSet.end() &&
            vertexSet.lower_bound(Vertex{v, 0}) != vertexSet.end()) {
            Vertex uVertex = *vertexSet.lower_bound(Vertex{u, 0});
            Vertex vVertex = *vertexSet.lower_bound(Vertex{v, 0});

            if (uVertex.weight <= vVertex.weight) {
                cover.insert(u);
                vertexSet.erase(uVertex);
            } else {
                cover.insert(v);
                vertexSet.erase(vVertex);
            }
        }

        edgeSet.erase(edge);
    }
}

int main() {
    ifstream inputFile("input.txt");
    ofstream outputFile("output.txt");

    if (!inputFile.is_open() || !outputFile.is_open()) {
        cerr << "Failed to open files." << endl;
        return 1;
    }

    int V, E;
    inputFile >> V >> E;

    vector<pair<int, int>> edges(E);
    vector<Vertex> vertices(V);

    for (int i = 0; i < E; ++i) {
        inputFile >> edges[i].first >> edges[i].second;
    }

    for (int i = 0; i < V; ++i) {
        vertices[i].index = i + 1;
        inputFile >> vertices[i].weight;
    }

    set<int> cover;
    minWeightVertexCover(V, edges, vertices, cover);

    // 输出结果到文件
    outputFile << "Minimum Weight Vertex Cover:" << endl;
    for (int vertex : cover) {
        outputFile << vertex << " ";
    }
    outputFile << endl;

    // 关闭文件
    inputFile.close();
    outputFile.close();

    return 0;
}




//算法分析题
//7-2
//设有一个文件含有n个记录
//(1)试设计一个算法随机抽选该文件的m个记录
//(2)如果事先不知道文件中记录的个数，应如何随机抽取其中的m个记录

答：
(1)
1.初始化一个空的结果集 selectedRecords 用于存储抽选的记录。
2.从第一个记录开始，将其放入 selectedRecords 中。
3.对于每个后续的记录，以概率 m/i（其中 i 是当前已处理的记录数）将其替换掉 selectedRecords 中的某个记录，保持结果集大小为 m。
4.重复步骤 3 直到处理完所有记录。
(2)
1.初始化一个空的结果集 selectedRecords 用于存储抽选的记录。
2.逐个处理文件中的记录，以概率 m/i 将其放入 selectedRecords 中，其中 i 是当前已处理的记录数。
3.重复步骤 2 直到处理完所有记录。
//7-4
//设X是含有n个元素的集合，从X中均匀的选取元素，设第K次选取时首次出现重复
//(1)证明当n充分大时k的期望值为贝塔倍的





//算法实现题
//7-4
//逆矩阵问题
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

// 函数用于将矩阵转换为单位矩阵
void makeIdentity(int n, vector<vector<double>>& mat, vector<vector<double>>& identity) {
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            identity[i][j] = (i == j) ? 1.0 : 0.0;
        }
    }
}

// 函数用于进行Gauss-Jordan消元法
void gaussJordanElimination(int n, vector<vector<double>>& mat, vector<vector<double>>& identity) {
    for (int i = 0; i < n; ++i) {
        // 将对角线元素归一
        double pivot = mat[i][i];
        for (int j = 0; j < n; ++j) {
            mat[i][j] /= pivot;
            identity[i][j] /= pivot;
        }

        // 将其他行的元素变为零
        for (int k = 0; k < n; ++k) {
            if (k != i) {
                double factor = mat[k][i];
                for (int j = 0; j < n; ++j) {
                    mat[k][j] -= factor * mat[i][j];
                    identity[k][j] -= factor * identity[i][j];
                }
            }
        }
    }
}

int main() {
    ifstream inputFile("input.txt");
    ofstream outputFile("output.txt");

    if (!inputFile.is_open() || !outputFile.is_open()) {
        cerr << "Failed to open files." << endl;
        return 1;
    }

    int n;
    inputFile >> n;

    // 读取矩阵
    vector<vector<double>> matrix(n, vector<double>(n, 0));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            inputFile >> matrix[i][j];
        }
    }

    // 创建单位矩阵
    vector<vector<double>> identity(n, vector<double>(n, 0));
    makeIdentity(n, matrix, identity);

    // 进行Gauss-Jordan消元法
    gaussJordanElimination(n, matrix, identity);

    // 输出结果到文件
    outputFile << "Inverse Matrix:" << endl;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            outputFile << identity[i][j] << " ";
        }
        outputFile << endl;
    }

    // 关闭文件
    inputFile.close();
    outputFile.close();

    return 0;
}

//7-2
//素数测试问题
#include <iostream>
#include <fstream>
#include <cmath>

using namespace std;

bool isPrime(int n) {
    // 小于等于1的数不是素数
    if (n <= 1) {
        return false;
    }

    // 从2到sqrt(n)检查是否有因子
    for (int i = 2; i <= sqrt(n); ++i) {
        if (n % i == 0) {
            return false; // 有因子，不是素数
        }
    }

    return true; // 没有因子，是素数
}

int main() {
    ifstream inputFile("input.txt");
    ofstream outputFile("output.txt");

    if (!inputFile.is_open() || !outputFile.is_open()) {
        cerr << "Failed to open files." << endl;
        return 1;
    }

    int number;
    inputFile >> number;

    // 进行素数测试
    bool result = isPrime(number);

    // 输出结果到文件
    outputFile << "Is " << number << " a prime number? ";
    outputFile << (result ? "Yes" : "No") << endl;

    // 关闭文件
    inputFile.close();
    outputFile.close();

    return 0;
}
